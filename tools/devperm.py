#!/usr/bin/env python3

import sys
# with collection, we keep the same device order as the json file
import json, collections
import re

if len(sys.argv) != 2:
    print("usage: ", sys.argv[0], "<filename.json>\n");
    sys.exit(1);

filename = sys.argv[1];

########################################################
# Ada file header and footer
########################################################

ada_header = """
-- @file devperm.ads
--
-- Copyright 2018 The wookey project team <wookey@ssi.gouv.fr>
--   - Ryad     Benadjila
--   - Arnauld  Michelizza
--   - Mathieu  Renard
--   - Philippe Thierry
--   - Philippe Trebuchet
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
--     Unless required by applicable law or agreed to in writing, software
--     distributed under the License is distributed on an "AS IS" BASIS,
--     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--     See the License for the specific language governing permissions and
--     limitations under the License.
--
-- This file has been generated by tools/devmap.py
--
--

with ewok.perm;  use ewok.perm;

package ewok.devices.perms
   with spark_mode => off
is

""";


ada_footer= """);

end ewok.devices.perms;
""";



with open(filename, "r") as jsonfile:
    data = json.load(jsonfile, object_pairs_hook=collections.OrderedDict);


def hex_to_adahex(val):
    if not re.match(r'^0$', val):
        hexa = re.sub(r'0x', '16#', val);
        hexa = re.sub(r'$', '#', hexa);
    else:
        hexa = val;
    return hexa;

def bin_to_adabin(val):
    if not re.match(r'^0$', val):
        hexa = re.sub(r'0b', '2#', val);
        hexa = re.sub(r'$', '#', hexa);
    else:
        hexa = val;
    return hexa;

def lookahead(iterable):
    """Pass through all values from the given iterable, augmented by the
       information if there are more values to come after the current one
       (True), or if it is the last value (False).
    """
    # Get an iterator and pull the first value.
    it = iter(iterable)
    last = next(it)
    # Run the iterator to exhaustion (starting from the second value).
    for val in it:
        # Report the *previous* value (more to come).
        yield last, True
        last = val
        # Report the last value.
    yield last, False

def generate_ada():
    print("   permissions : constant array (t_periph_id range t_periph_id'succ (t_periph_id'first) .. t_periph_id'last) of ewok.perm.t_perm_name := (");
    counter = 1
    for device, has_more in lookahead(data):
        if device["type"] != "block":
            continue;
        dev_id = device["name"].upper();
        dev_id = re.sub(r'-', '_', dev_id);
        if counter > 1:
            print("   ,%s => " % dev_id, end='');
        else:
            print("    %s => " % dev_id, end='');
        counter = counter + 1;

        # device permissions
        print("%s" %  device["permission"]);
#print data;

print(ada_header);
generate_ada();
print(ada_footer);
